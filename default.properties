# the default properties file with keys for which we need mandatory defaults


########################### 0. global part ###############################

jpf.version = 4.0a

# instances that are both search and VM listeners
#jpf.listener = 

# do we want JPF exceptions to print their stack traces (that's only for
# debugging)
jpf.print_exception_stack = true


# this is usually used in class path specs from mode property files
# (for expanded strings)
jpf.basedir = .

########################### 1. Search part ###############################
search.class = gov.nasa.jpf.search.DFSearch

# in case this is a HeuristicSearch, we have to specify the Heuristic class to use
search.heuristic.class = gov.nasa.jpf.search.heuristic.BFSHeuristic

# class used to determine order of states with equal heuristic values
search.heuristic.comparator.class = gov.nasa.jpf.search.heuristic.DefaultComparator

# This flag indicates whether state matching will only be done when a state
# is revisited at a lower depth. By default this is false. If it is set to
# true and no error is found in a limited-depth search then it is guaranteed
# not to have such error below that depth. Note that for traditional
# depth limited search this does not hold
search.match_depth = false

# This flag indicates whether JPF should produce more than one error
# or stop at the first one
search.multiple_errors = false

# the minimum free memory bounds. If we fall below that threshold, we
# stop the search
search.min_free = 1M

# name of the file in which we store error paths. If not set, we don't store
search.error_path = error.xml

# do we want to print the path for each error
search.print_errors = true

# do we want the path to be printed as part of the error
search.print_path = true

# the standard properties we want to check for
search.properties=\
gov.nasa.jpf.jvm.NotDeadlockedProperty:\
gov.nasa.jpf.jvm.NoUncaughtExceptionsProperty

##########################################################################
# various heuristic parameters

# This number specifies the maximum number of states to keep on the queue
# during a heuristic search. By default it is set to -1
search.heuristic.queue_limit = -1

# This flag indicates whether branches with counts less than branch-start
# are to be ranked according to how many times they have been taken.
# It is set to true by default. If it is set to false, they are all valued
# the same
search.heuristic.branch.count_early = true

# This number determines at what point branches are heuristically valued as worse
# than non-branching transitions. By default this value is 1.
branch_start = 1


# This number if greater than 0 is returned as the heuristic value for
# non-branching transitions. By default it is set to -1 in which case the
# value of branch-start is returned instead
search.heuristic.branch.no_branch_return = -1

# exclusive search listeners
# search.listener = 

##########################################################################
############################### 2. VM part ###############################
vm.class = gov.nasa.jpf.jvm.JVM

# class used to hash/store states (if not set, states are not matched)
vm.storage.class = gov.nasa.jpf.jvm.JenkinsStateSet

# class used to maintain the backtrack stack
vm.backtracker.class = gov.nasa.jpf.jvm.DefaultBacktracker

# serializer to be used by state set (vm.storage.class)
vm.serializer.class = gov.nasa.jpf.jvm.CollapsingSerializer

# restorer to be used by backtracker such as DefaultBacktracker UNLESS a
# serializer that is also a restorer (such as CollapsingSerializer) is used.
# I.e. this is only read if serializer is not used or it's not a StateRestorer
vm.restorer.class = gov.nasa.jpf.jvm.CollapsingRestorer

# instruction factory
vm.insn_factory.class = gov.nasa.jpf.jvm.DefaultInstructionFactory

# class used to set method and field attributes at load time
vm.attributor.class = gov.nasa.jpf.jvm.DefaultAttributor

# the next two are used to load classes into JPF which are NOT in the normal classpath
# (we can use the automatic defaults if started from the JPF root dir)
# where to load essential system model classes from (like java.lang.Thread)
vm.bootclasspath = ${jpf.basedir}/build/env/jpf

# where to load application specific classes from
vm.classpath = build/examples

# where do we look for sources (defaults assume we start in the JPF root dir)
vm.sourcepath = ${jpf.basedir}/src:${jpf.basedir}/examples:${jpf.basedir}/test

# where to get atomicity and other code execution attributes from
vm.attributor.class = gov.nasa.jpf.jvm.DefaultAttributor

# pattern list for assertion enabled classes
vm.enable_assertions = *

# is Verify.assertTrue() a step boundary? <2do> - go away - should be unified with POR
vm.visible_asserts = false

# do we support the Verify.ignorePath() API (to imperatively ignore paths in modeled/instrumented programs)?
vm.verify.ignore_path = true

# do we want on-the-fly partial order reduction? If not set, JPF executes
# line-wise ("atomic" lines, which is mostly for educational reasons)
vm.por = true

# do we treat field access of objects that are reachable from different threads as
# transaction boundaries (in case there is more tha one thread)?
vm.por.field_boundaries = true

# do we try to deduce if a field is supposed to be protected by a lock? In this
# case, we stop to treat this field as a boundary step, but only if we see the lock
vm.por.sync_detection = true

# used to detect if a field is lock protected - only required if we use on-the-fly POR
# with sync-detection
vm.por.fieldlockinfo.class = gov.nasa.jpf.jvm.StatisticFieldLockInfo

# filter for field name prefixes to exclude and include in the por analysis
# (can be list of strings)
vm.por.exclude_fields=java.:sun.
vm.por.include_fields=

# do we reclaim unused memory (run garbage collection)
vm.gc = true

# do we run finalizers on collected objects (only makes sense with garbage collection)
vm.finalize = true

# do we want to halt execution on each throw, w/o looking for exception handlers?
# (useful for empty handler blocks, over-permissive catches or generally misused exceptions
vm.halt_on_throw = false

# class that is used to create scheduling relevant choice generators.
# this will replace the scheduler
vm.scheduler_factory.class = gov.nasa.jpf.jvm.DefaultSchedulerFactory

# do we want to check for numeric instructions using NaNs
# (we can assume this to be safe, given the IEEE propagation rules)
vm.check_fp = false

# do we want to check for numeric comparisons using NaNs
# (that's probably always an error)
vm.check_fp_compare = true

# report all live threads upon error
vm.report.show_threads = true

# do we want to report each step (insn) for a Transition
vm.report.show_steps = true

# do we want to print bytecodes instead of source lines?
vm.report.show_bytecode = false

# do we want to print placeholders for missing source lines
vm.report.show_missing_lines = false


# print output as it is generated during the search (for all paths)
vm.tree_output = true

# print output along path when reporting an error
vm.path_output = false

# file name to store and read the CG stack of a trace from
# (used to replay error path execution)
#vm.use_trace = path_choices

############################### 3. CG part ###############################

# default BooleanChoiceGenerator sequence: do we start with 'false'
cg.boolean.false_first = true

cg.randomize_choices = false

# Windows seem to have a different default
log.level=severe
