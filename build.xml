<?xml version="1.0" ?>

<!--
  build.xml - the global JPF build system configuration
              using Ant (http://jakarta.apache.org/ant)
  targets:
    
    clean             remove the files that have been generated by the build process
    compile           compile JPF and its specific (modeled) environment libraries
    compile-env-jpf   compile exclusive JPF classes for (modeled) environment
    compile-env-jvm   compile native method peer classes for (modeled) environment
    compile-examples  compile all the examples
    compile-jpf       compile all JPF classes
    compile-tests     compile all the tests for JPF
    dist              generate the compressed distribution tar files
    dist-src          generate the compressed source distribution tar files
    docs-javadoc      create javadoc documentation
    init              common task/target initialization
    jar               create jar archives for JPF, its JVM and their environment models
    run-tests         run all JPF tests
-->

<project name="nasa-jpf" default="compile" basedir=".">

  <!-- ============================ COMMON SECTION ========================== -->

  <!-- this is where platform specific settings come in
       (note this has to be read first in case you want to override props) -->
  <property file="local.properties"/>
  <property file="${build.compiler}.properties"/>
	
  <!-- this is where we get static things like the version from (but make sure they
       don't collide) -->
  <property file="default.properties"/>
	
  <!-- our required global properties -->
  <property name="app.name"             value="jpf" />
		
  <!-- Project directories -->
  <property name="bin.dir"              value="bin" />
  <property name="build.dir"            value="build" />
  <property name="build.dist.dir"       value="${build.dir}/dist" />
  <property name="build.env.dir"        value="${build.dir}/env/" />
  <property name="build.env.jpf.dir"    value="${build.env.dir}/jpf" />
  <property name="build.env.jvm.dir"    value="${build.env.dir}/jvm" />
  <property name="build.examples.dir"   value="${build.dir}/examples" />
  <property name="build.jpf.dir"        value="${build.dir}/jpf" />
  <property name="build.lib.dir"        value="${build.dir}/lib" />
  <property name="build.test.dir"       value="${build.dir}/test" />
  <property name="build-tools.dir"      value="build-tools" />
  <property name="build-tools.bin.dir"  value="${build-tools.dir}/bin" />
  <property name="build-tools.lib.dir"  value="${build-tools.dir}/lib" />
  <property name="doc.dir"              value="doc"/>
  <property name="doc.api.dir"          value="${doc.dir}/api"/>
  <property name="doc.images.dir"       value="${doc.dir}/images"/>
  <property name="env.dir"              value="env"/>
  <property name="env.jpf.dir"          value="${env.dir}/jpf"/>
  <property name="env.jvm.dir"          value="${env.dir}/jvm"/>
  <property name="examples.dir"         value="examples" />
  <property name="lib.dir"              value="lib" />
  <property name="src.dir"              value="src" />
  <property name="test.dir"             value="test" />
  <property name="ext.dir"              value="extensions" />

  <property name="packages"    value="gov.nasa.*"/>
  <property name="debug"       value="on"/>
  <property name="deprecation" value="on"/>
  <property name="jar"         value="jar" />

  <!-- generic classpath settings (collecting all libs under extensions) -->
  <path id="lib.path">
  	<fileset dir=".">
  	   <include name="${lib.dir}/*.jar"/>
  	</fileset>
  	<fileset dir=".">
  	   <include name="${lib.dir}/*.zip"/>
  	</fileset>
    <fileset dir="${ext.dir}">
       <include name="**/${lib.dir}/*.jar"/>
    </fileset>
  </path>

  <!-- we need to do this trick to avoid Ant recompiling all our sources
       (it needs to get exact srddirs) -->
  <path id="esd">
  	<pathelement location="${src.dir}"/>
  	<dirset dir="${ext.dir}">
  		<include name="**/src"/>
  	</dirset>
  </path>
  <property name="ext.src.dirs" refid="esd"/>

  <!--*********************************************************************
      * init: common tasks, mainly to setup directories and check what other
      *       tasks can be executed
      *-->
  <target name="init" description="common task/target initialization">
    <tstamp/>

    <echo>****************** JPF build system ********************
current dir:      ${user.dir}
user home dir:    ${user.home}
classpath:        ${java.class.path}
          
java version:     ${java.version}
ant version:      ${ant.version}
OS:               ${os.name}-${os.arch}-${os.version}
    </echo>

    <echo>
NOTE - if property values are printed with brackets
       (e.g. '${bla}'), it means they are NOT defined.
       This is a 'echo' task itch.
    </echo>

    <available file="local.properties" property="local.properties.present"/>
    <echo message="local.properties.present=${local.properties.present}" />
    <echo message="NOTE - some targets might be skipped if you don't have a 'local.properties' file" />

    <echo/>
    <echo message="--- creating build directories.."/>
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.jpf.dir}"/>
    <mkdir dir="${build.test.dir}"/>
    <mkdir dir="${build.env.dir}"/>
    <mkdir dir="${build.env.jvm.dir}"/>
    <mkdir dir="${build.env.jpf.dir}"/>

    <echo/>
    <echo message="--- checking for external libraries.."/>
  
    <condition property="test.jars.present.ant">
      <available classname="org.junit.Test"/>
    </condition>
    <condition property="test.jars.present.ant.status"
               value="JUnit found with Ant."
               else="JUnit not found from Ant.  To fix, put the jar file${line.separator}in your CLASSPATH or in ANT_HOME/lib.">
      <isset property="test.jars.present.ant"/>
    </condition>
    <echo message="${test.jars.present.ant.status}"/>

    <condition property="test.jars.present.javac">
      <available classpathref="lib.path" classname="junit.framework.TestCase"/>
    </condition>
    <condition property="test.jars.present.javac.status"
               value="JUnit available for build."
               else="JUnit not available for build; not available from Ant${line.separator}nor from lib.path">
      <isset property="test.jars.present.javac"/>
    </condition>
    <echo message="${test.jars.present.javac.status}"/>

  </target>


  <!--*********************************************************************
      * compile-jpf: compile JPF core classes
      *-->
  <target name="compile-jpf" depends="init"
          description="compile JPF core classes">
    <javac srcdir="${src.dir}"
    	   destdir="${build.jpf.dir}"
           debug="${debug}"
           source="1.5"
           deprecation="${deprecation}">
      <classpath>
        <path refid="lib.path"/>
      </classpath>
    </javac>  	  	
  	
	<copy file="default.properties" todir="${build.jpf.dir}/gov/nasa/jpf"/>
  </target>

  <!--*********************************************************************
	      * compile-ext: compile JPF extension classes
	      *-->
	  <target name="compile-ext" depends="compile-jpf"
	          description="compile optional extension classes">
	    <javac srcdir="${ext.src.dirs}"
	    	   destdir="${build.jpf.dir}"
	           debug="${debug}"
	           source="1.5"
	           deprecation="${deprecation}">
	      <classpath>
	        <path refid="lib.path"/>
	      </classpath>
	    </javac>  	  	
	  </target>

  <!--*********************************************************************
      * compile-env-jvm: compile MJI native peer class environment
      *-->
  <target name="compile-env-jvm" depends="compile-jpf"
          description="compile MJI native peer classes">
    <javac srcdir="${env.jvm.dir}"
           destdir="${build.env.jvm.dir}"
           debug="${debug}"
           source="1.5"
           deprecation="${deprecation}">
      <classpath>
        <path refid="lib.path"/>
        <pathelement path="${build.jpf.dir}"/>
      </classpath>
    </javac>
  </target>


  <!--*********************************************************************
      * compile-env-jpf: compile standard MJI model classes
      *-->
  <target name="compile-env-jpf" depends="compile-jpf"
          description="compile MJI model classes">
    <javac srcdir="${env.jpf.dir}"
           destdir="${build.env.jpf.dir}"
           debug="${debug}"
           source="1.5"
           deprecation="${deprecation}">
      <classpath>
        <path refid="lib.path"/>
        <pathelement path="${build.jpf.dir}"/>
        <pathelement path="${build.env.jvm.dir}"/>
      </classpath>
    </javac>
  </target>



  <!--*********************************************************************
      * compile: compile JPF and its modeled environment libraries
      *-->
  <target name="compile" depends="compile-jpf, compile-ext, compile-env-jvm, compile-env-jpf"
          description="compile JPF and its specific (modeled) environment libraries">
  </target>
 

  <!--*********************************************************************
      * compile-noshell: compile pure java shell script alternatives
      *-->
  <target name="compile-noshell" depends="init"
          description="compile pure java shell script alternatives">
    <javac srcdir="build-tools/noshell/src"
           destdir="build-tools/noshell/build"
           debug="${debug}"
           source="1.5"
           deprecation="${deprecation}">
      <classpath/>
    </javac>
    <copy todir=".">
       <fileset dir="build-tools/noshell/build" includes="*.class"/>
    </copy>
  </target>



  <!--======================== EXAMPLES SECTION =========================-->

  <!--*********************************************************************
      * compile-examples: [optional] Compile the examples
      *-->
  <target name="compile-examples" depends="compile"
          description="compile examples">
          
    <!-- Create the build/examples directory -->
    <mkdir dir="${build.examples.dir}"/>

    <javac srcdir="${examples.dir}"
           destdir="${build.examples.dir}"
           debug="${debug}"
           source="1.5"
           deprecation="${deprecation}">
      <classpath>
        <path refid="lib.path"/>
        <pathelement path="${build.jpf.dir}"/>
        <pathelement path="${build.env.jvm.dir}"/>
        <pathelement path="${build.env.jpf.dir}"/>
      </classpath>
    </javac>

    <!-- Copy *.ltl, *.properties to the build/examples directory. -->
    <copy todir="${build.examples.dir}">
       <fileset dir="${examples.dir}" includes="**/*.ltl, **/*.properties"/>
    </copy>

  </target>

  <!--======================== TEST SECTION ==============================-->

  <!--*********************************************************************
      * compile-tests: [optional] compile all the tests for JPF
      *-->
  <target name="compile-tests" depends="compile"
          description="compile all the tests for JPF">
  	<fail unless="test.jars.present.javac"
              message="JUnit must be in library path (or classpath) when running ant for this target."/>
    <javac srcdir="${test.dir}"
           destdir="${build.test.dir}"
           debug="${debug}"
           source="1.5"
           deprecation="${deprecation}">
      <classpath>
        <path refid="lib.path"/>
        <pathelement path="${build.jpf.dir}"/>
        <pathelement path="${build.env.jvm.dir}"/>
        <pathelement path="${build.env.jpf.dir}"/>
      </classpath>
    </javac>
    
    <!-- Copy *.ltl, *.properties to the build/test directory. -->
    <copy todir="${build.test.dir}">
       <fileset dir="${test.dir}" includes="**/*.ltl, **/*.properties"/>
    </copy>
  </target>

  <!--*********************************************************************
      * run-tests: [optional] run all JPF tests
      *-->
  <target name="run-tests" depends="compile-tests"
          description="run all JPF tests">
    <echo message="--- running Junit tests from ${build.test.dir}.." />

  	<fail unless="test.jars.present.ant"
              message="JUnit must be in classpath when running ant for this target."/>
  	
    <junit printsummary="on" showoutput="off">
      <formatter type="plain"/>

      <classpath id="test.path">
        <!-- we need to add the system classpath if we run junit forked
             (otherwise it won't find the ant stuff itself) -->
        <pathelement path="${java.class.path}"/>
        <path refid="lib.path"/>
        <pathelement path="${build.jpf.dir}"/>
        <pathelement path="${build.test.dir}"/>
        <pathelement path="${build.env.jvm.dir}"/>
        <pathelement path="${build.env.jpf.dir}"/>
      </classpath>

      <batchtest fork="yes" todir="${build.test.dir}">
        <fileset dir="${build.test.dir}">
					<include name="**/jvm/Test*JPF.class"/>
					<include name="**/mc/Test*JPF.class"/>
					<exclude name="**/jvm/TestJPF.class"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <!--=============== DOCUMENTATION AND FORMAT SECTION ===================-->
   

  <!--*********************************************************************
      * docs-javadoc: create API documentation with javadoc
      *-->
  <target name="docs-javadoc" depends="init"
          description="create javadoc documentation">
    <mkdir dir="${doc.api.dir}"/>
    
    <echo message="--- running javadoc to create documentation.."/>
    
    <javadoc packagenames="${packages}"
             sourcepath="${src.dir}"
             destdir="${doc.api.dir}"
             author="true"
             version="true"
             use="true"
             source="1.5"
             windowtitle="${app.name} API"
             doctitle="${app.name}">
      <classpath>
        <path refid="lib.path"/>
      </classpath>
    </javadoc>
  </target>


  <!--=============== DISTRIBUTION AND ARCHIVING SECTION =================-->

  <!--*********************************************************************
      * jar: build jars with all JPF binaries
      *-->
  <target name="jar" depends="compile"
          description="create jar archives for JPF, its JVM and their environment models">
    <mkdir dir="${build.lib.dir}"/>
    <copy todir="${build.jpf.dir}/gov/nasa/jpf">
      <fileset dir="${user.dir}">
        <include name="jpf.properties"/>
        <include name="default.properties"/>
      </fileset>
    </copy>
    <jar jarfile="${build.lib.dir}/${app.name}.jar" basedir="${build.jpf.dir}"/>
    <jar jarfile="${build.lib.dir}/env_jpf.jar" basedir="${build.env.jpf.dir}" />
    <jar jarfile="${build.lib.dir}/env_jvm.jar" basedir="${build.env.jvm.dir}" />
  </target>

  <!--*********************************************************************
      * dist: create a binary distribution
      *-->
      
  <target name="dist"
          description="generate the compressed distribution tar files">
    
    <!-- Create the distribution directory -->
    <mkdir dir="${build.dist.dir}"/>
    
    <!-- Create the compressed distribution file in the distribution
         directory -->
    <tar destfile="${build.dist.dir}/${app.name}-${jpf.version}.tar.gz"
         compression="gzip">
         <tarfileset dir="${src.dir}"
                     prefix="${app.name}-${jpf.version}/${src.dir}" />
    	 <tarfileset dir="${test.dir}"
                     prefix="${app.name}-${jpf.version}/${test.dir}" />
    	 <tarfileset dir="${env.dir}"
                     prefix="${app.name}-${jpf.version}/${env.dir}" />  	
    	 <tarfileset dir="${examples.dir}"
                     prefix="${app.name}-${jpf.version}/${examples.dir}" />
    	 <tarfileset dir="${ext.dir}/LTL2Buchi"
        			 prefix="${app.name}-${jpf.version}/${ext.dir}/LTL2Buchi"
    	             excludes="lib/*"/>
     	 <tarfileset dir="${doc.dir}"
     	 	         excludes="src/*"
                     prefix="${app.name}-${jpf.version}/${doc.dir}" />  	
     	 <tarfileset dir="${bin.dir}"
                     mode="755"
                     prefix="${app.name}-${jpf.version}/${bin.dir}" />
         <tarfileset dir="${build-tools.bin.dir}"
                     mode="755"
                     prefix="${app.name}-${jpf.version}/${build-tools.bin.dir}" />
   	     <tarfileset dir="${basedir}" prefix="${app.name}-${jpf.version}">
   	     	 <include name= "jpf.properties"/>
    	     <include name= "default.properties"/>
    	     <include name= "README"/>
   	     	 <include name= "build.xml"/>
   	     	 <include name= "NOSA-1.3-JPF"/>
   	     </tarfileset>

    </tar>
  </target>



  <!--========================= HOUSEKEEPING =============================-->

  <!--*********************************************************************
      * clean: cleanup from previous tasks/builds
      *-->
  <target name="clean">
    <delete dir="${build.dir}" />
    <delete dir="${doc.api.dir}" />
    <delete>
      <fileset dir="." includes="**/*~" defaultexcludes="no" />
      <fileset dir="." includes="**/*.bak" defaultexcludes="no" />
      <fileset dir="." includes="**/error.xml" />
    </delete>
  </target>

</project>
